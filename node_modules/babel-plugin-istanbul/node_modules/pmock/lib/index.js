var extend = require('extend');

/**
 * Create a new value of a process property.
 *
 * @param {string} name Name of the property to set.
 * @param {*} newValue New value for the property.
 *
 * @return {*} The new value for the property.
 */
var setProperty = function (name, newValue) {
    if (typeof process[name] === 'function') {
        return function () {
            return newValue;
        };
    }

    return newValue;
};

/**
 * Change the value of a given property of "process".
 *
 * @param {string} name Name of the property to change.
 * @param {*} newValue The new value for the property.
 *
 * @return {object} Object with a "reset" function to change the property back to
 * it's original value.
 */
var mockProperty = function (name, newValue) {
    var properties = Object.getOwnPropertyDescriptor(process, name);
    var tempValue = {};

    if (typeof properties.value === 'object' && typeof newValue === 'object') {
        extend(true, tempValue, properties, newValue);
    } else {
        tempValue = newValue;
    }

    if (!properties.writable) {
        var newProperties = Object.getOwnPropertyDescriptor(process, name);

        newProperties.value = setProperty(name, tempValue);
        Object.defineProperty(process, name, newProperties);
    } else {
        process[name] = setProperty(name, tempValue);
    }

    return {
        reset: function () {
            Object.defineProperty(process, name, properties);
        }
    };
};

/**
 * Mock properties of "process".
 *
 * @return {object} Object with all properties.
 */
var mockProcess = function () {
    var mocks = {};

    Object.keys(process).forEach(function (property) {
        mocks[property] = function (newValue) {
            return mockProperty(property, newValue);
        };
    });
    return mocks;
};

module.exports = mockProcess();
