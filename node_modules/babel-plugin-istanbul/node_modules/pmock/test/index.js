'use strict';
var expect = require('chai').expect;
var dummy = require('./dummy');
var pmock = require('../');

describe('process.memoryUsage()', function () {
	before(function () {
		this.usage = { rss: 200, heapTotal: 201, heapUsed: 203 };
		this.p = pmock.memoryUsage(this.usage);
	});

	it('replace memoryUsage', function() {
		expect(process.memoryUsage()).to.equal(this.usage);
	});

	it('resets memoryUsage', function () {
		this.p.reset();
		expect(process.memoryUsage()).to.not.equal(this.usage);
	});

});

describe('process.platform', function () {
	before(function () {
		this.platform = 'rooftop 98';
		this.oldPlatform = process.platform;
		this.p = pmock.platform(this.platform);
	});

	it('replace platform, keeps properties', function() {
		expect(process.platform).to.equal(this.platform);
        expect(Object.getOwnPropertyDescriptor(process, 'platform').writable).to.equal(false);
	});

	it('resets platform', function () {
		this.p.reset();
		expect(process.platform).to.not.equal(this.platform);
		expect(process.platform).to.equal(this.oldPlatform);
	});

});


describe('process.cwd()', function () {
	before(function () {
		this.oldCwd = process.cwd();
		this.p = pmock.cwd('/home/someuser/config/');
	});

	it('replace cwd', function() {
		expect(process.cwd()).to.equal('/home/someuser/config/');
	});

	it('resets cwd', function () {
		this.p.reset();
		expect(process.cwd()).to.not.equal('/home/someuser/config/');
		expect(process.cwd()).to.equal(this.oldCwd);
	});

});

describe('module env test', function () {
	before(function () {
		this.p = pmock.env({
			ENVMOCK_TEST_PRODUCTION: true
		});
	});

	it('replaces environment variables', function () {
		expect(dummy.isProduction()).to.equal(true);
	});

	it('resets the variables', function () {
		this.p.reset();
		expect(dummy.isProduction()).to.equal(false);
	});

});
